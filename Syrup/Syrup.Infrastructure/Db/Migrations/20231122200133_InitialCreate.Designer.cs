// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Syrup.Core.Db.Entities;

#nullable disable

namespace Syrup.Infrastructure.Db.Migrations
{
    [DbContext(typeof(SyrupDbContext))]
    [Migration("20231122200133_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Syrup.Core.Db.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Chat_pkey");

                    b.HasIndex("CreatorId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Company_pkey");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.CompanyUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("CompanyUser_pkey");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUser", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.DeletedUserMessage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("DeletedUserMessage_pkey");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedUserMessage", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.FavoriteProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("FavoriteProduct_pkey");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProduct", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDatetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Message_pkey");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChatId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("Order_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("OrderProduct_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Product_pkey");

                    b.HasIndex("CompanyId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AboutMyself")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("User_pkey");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.UserChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("UserChat_pkey");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChat", (string)null);
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Chat", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.User", "Creator")
                        .WithMany("Chats")
                        .HasForeignKey("CreatorId")
                        .IsRequired()
                        .HasConstraintName("Chat_CreatorId_fkey");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.CompanyUser", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("CompanyUser_CompanyId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("CompanyUser_UserId_fkey");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.DeletedUserMessage", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Message", "Message")
                        .WithMany("DeletedUserMessages")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("DeletedUserMessage_MessageId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.User", "User")
                        .WithMany("DeletedUserMessages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("DeletedUserMessage_UserId_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.FavoriteProduct", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FavoriteProduct_ProductId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FavoriteProduct_UserId_fkey");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Message", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("Message_AuthorId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("Message_ChatId_fkey");

                    b.Navigation("Author");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Order", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Order_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.OrderProduct", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("OrderProduct_OrderId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("OrderProduct_ProductId_fkey");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Product", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("Product_CompanyId_fkey");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.UserChat", b =>
                {
                    b.HasOne("Syrup.Core.Db.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .IsRequired()
                        .HasConstraintName("UserChat_ChatId_fkey");

                    b.HasOne("Syrup.Core.Db.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserChat_UserId_fkey");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Company", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Message", b =>
                {
                    b.Navigation("DeletedUserMessages");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Syrup.Core.Db.Entities.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("CompanyUsers");

                    b.Navigation("DeletedUserMessages");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("UserChats");
                });
#pragma warning restore 612, 618
        }
    }
}
